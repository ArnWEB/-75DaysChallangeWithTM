   class Solution {
class Pair
{
    int start,end;
    Pair(int start,int end)
    {
        this.start=start;
        this.end=end;
    }
}
public int[][] merge(int[][] intervals) {
    ArrayList<Pair> list=new ArrayList<>();
    for(int i=0;i<intervals.length;i++)
    {
        list.add(new Pair(intervals[i][0],intervals[i][1]));
    }
    Collections.sort(list, new Comparator<Pair>()
                {
                    public int compare(Pair a,Pair b)
                    {
                        if(a.start<b.start)
                            return -1;
                        else if(a.start>b.start)
                            return 1;
                        else
                        {
                            return a.end-b.end;
                        }
                    }
                });
    
    ArrayList<Pair> mergedIntervals=new ArrayList<>();
    for(int i=0;i<list.size();i++)
    {   
        Pair curr=list.get(i);
        if(mergedIntervals.size()==0)
        {
            mergedIntervals.add(curr);
        }
        else
        {
            Pair last=mergedIntervals.remove(mergedIntervals.size()-1);
            if(curr.start>=last.start && curr.start<=last.end)
            {
                mergedIntervals.add(new Pair(last.start,Math.max(curr.end,last.end))); 
            }                           // because we haven't arrange according to EndTime
            else
            {
                mergedIntervals.add(last);
                mergedIntervals.add(curr);
            }
        }
    }
    
    int[][] ans=new int[mergedIntervals.size()][2];
    for(int i=0;i<mergedIntervals.size();i++)
    {
        ans[i][0]=mergedIntervals.get(i).start;
        ans[i][1]=mergedIntervals.get(i).end;
    }
                            
 
 return ans;
}
   }