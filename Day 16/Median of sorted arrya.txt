class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length>nums2.length)
            return findMedianSortedArrays(nums2,nums1);
        int lenOfNums1=nums1.length;
        int lenOfNums2=nums2.length;
        int low=0;
        int high=lenOfNums1;
        while(low<=high)
        {
            int mid=low+high>>1;
            int cut1=mid;
            int cut2=((lenOfNums1+lenOfNums2+1)/2)-cut1;
            int l1=cut1==0?Integer.MIN_VALUE:nums1[cut1-1];
            int l2=cut2==0?Integer.MIN_VALUE:nums2[cut2-1];
            int r1=cut1==lenOfNums1?Integer.MAX_VALUE:nums1[cut1];
            int r2=cut2==lenOfNums2?Integer.MAX_VALUE:nums2[cut2];
            if(l1<=r2 && l2<=r1)
            {
                if((lenOfNums1+lenOfNums2)%2==0)
                {
                    return (Math.max(l1,l2)+Math.min(r1,r2))/2.0;
                }
                else
                    return Math.max(l1,l2);
            }
            else if(l1>r2)
            {
                high=cut1-1;
            }
            else
            {
                low=cut1+1;
            }
        }
        return 0.0;
        
    }
}