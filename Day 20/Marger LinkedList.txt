/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode temp1=list1;
        ListNode temp2=list2;
        ListNode n=null;
        ListNode curr=null;
        while(temp1!=null && temp2!=null)
        {
            if(temp1.val>=temp2.val)
            {
                if(n!=null)
                {
                    curr.next=new ListNode(temp2.val);
                    curr=curr.next;
                }
                else
                {
                    n=new ListNode(temp2.val);
                    curr=n;
                }
                temp2=temp2.next;
            }
            else
            {
               if(n!=null)
                {
                    curr.next=new ListNode(temp1.val);
                    curr=curr.next;
                }
                else
                {
                    n=new ListNode(temp1.val);
                    curr=n;
                }
                temp1=temp1.next;
            }
        }
        while(temp1!=null)
        {
            if(n!=null)
                {
                    curr.next=new ListNode(temp1.val);
                    curr=curr.next;
                }
                else
                {
                    n=new ListNode(temp1.val);
                    curr=n;
                }
            temp1=temp1.next;
        }
        while(temp2!=null)
        {
            if(n!=null)
                {
                    curr.next=new ListNode(temp2.val);
                    curr=curr.next;
                }
                else
                {
                    n=new ListNode(temp2.val);
                    curr=n;
                }
            temp2=temp2.next;
        }
        return n;
        
    }
}