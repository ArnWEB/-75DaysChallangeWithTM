class Solution {
    String wordFromBoard = "";
    boolean[][] visited;
    public boolean exist(char[][] board, String word) {
        visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                dfs(board, i, j, 0, word, "");
            }
        }
        return wordFromBoard.equalsIgnoreCase(word);
    }

    public void dfs(char[][] board, int row, int col, int idx, String word, String result) {
        if (result.length() == word.length()) {
            wordFromBoard = result;
            return;
        }
        if ((row < 0 || col < 0) || (row == board.length || col == board[0].length)) {
            return;
        }
        if (visited[row][col] == true) {
            return;
        }
        else if (board[row][col] == word.charAt(idx)) {
            result += board[row][col];
            visited[row][col] = true;
            dfs(board, row + 1, col, idx + 1, word, result);
            dfs(board, row - 1, col, idx + 1, word, result);
            dfs(board, row, col + 1, idx + 1, word, result);
            dfs(board, row, col - 1, idx + 1, word, result);
            visited[row][col] = false;
        }
    }
}